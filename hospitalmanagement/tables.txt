CREATE TABLE Patient (
    Pa_id INT PRIMARY KEY,
    Pa_name VARCHAR2(50) NOT NULL,
    Pa_age INT NOT NULL,
    Pa_gender VARCHAR2(10) NOT NULL,
    Pa_contact VARCHAR2(15) constraint pa_cont UNIQUE,
    Pa_type VARCHAR2(20) constraint pa_chk CHECK(Pa_type in ('Inpatient','Outpatient'))
);
CREATE TABLE Department (
    De_id INT PRIMARY KEY,
    De_name VARCHAR2(50) NOT NULL
);
CREATE TABLE Doctor (
    D_id INT PRIMARY KEY,
    D_name VARCHAR2(50),
    De_id INT,
    D_contact VARCHAR2(15) constraint do_cont UNIQUE,
    FOREIGN KEY (De_id) REFERENCES Department(De_id)
        ON DELETE CASCADE     
);
CREATE TABLE Receptionist (
    Re_id INT PRIMARY KEY,
    Re_name VARCHAR2(50) NOT NULL,
    Re_contact VARCHAR2(15) NOT NULL
);

CREATE TABLE Nurse (
    N_id INT PRIMARY KEY,
    N_name VARCHAR2(50) NOT NULL,
    N_contact VARCHAR2(15) NOT NULL
);

CREATE TABLE Room (
    R_id INT PRIMARY KEY,
    R_type VARCHAR2(30) CONSTRAINT chk_room CHECK (R_type IN ('ICU', 'General', 'Semi-Private', 'Private')),
    R_cost NUMBER NOT NULL
);
CREATE TABLE Room_Availability (
    R_id INT,
    R_date DATE,
    R_start_time TIMESTAMP,
    R_end_time TIMESTAMP,
    R_available VARCHAR2(3),  -- 'Yes' or 'No'
    PRIMARY KEY (R_id, R_date, R_start_time),
    FOREIGN KEY (R_id) REFERENCES Room(R_id)
        ON DELETE CASCADE
);



CREATE TABLE Medicine (
    M_id INT,                                -- Refers to Medicine ID
    Batch_id VARCHAR2(20),                   -- Batch identifier (e.g., 'B001')
    M_name VARCHAR2(50) NOT NULL,            -- Name of the medicine
    Price NUMBER NOT NULL,
    Manf_date DATE NOT NULL,
    Exp_date DATE NOT NULL,
    PRIMARY KEY (M_id, Batch_id)
);


CREATE TABLE Bill (
    B_id INT PRIMARY KEY,
    Pa_id INT,
    B_total NUMBER,
    FOREIGN KEY (Pa_id) REFERENCES Patient(Pa_id)
        ON DELETE CASCADE
);
CREATE TABLE Prescription (
    Prescription_ID INT PRIMARY KEY,
    D_id INT,
    Pa_id INT,
    M_id INT,
    Batch_id VARCHAR2(20),
    Pre_fee NUMBER,
    FOREIGN KEY (D_id) REFERENCES Doctor(D_id) ON DELETE CASCADE,
    FOREIGN KEY (Pa_id) REFERENCES Patient(Pa_id) ON DELETE CASCADE,
    FOREIGN KEY (M_id, Batch_id) REFERENCES Medicine(M_id, Batch_id) ON DELETE CASCADE
);


CREATE TABLE Nursing_Service (
    N_id INT,
    Pa_id INT,
    PRIMARY KEY (N_id, Pa_id),
    FOREIGN KEY (N_id) REFERENCES Nurse(N_id)
        ON DELETE CASCADE,
    FOREIGN KEY (Pa_id) REFERENCES Patient(Pa_id)
        ON DELETE CASCADE
       );


CREATE OR REPLACE TRIGGER trg_check_room_availability
BEFORE INSERT ON Admission
FOR EACH ROW
DECLARE
    v_ptype VARCHAR2(20);
    v_count INT;
BEGIN
    -- 1. Check if patient is inpatient
    SELECT PA_TYPE INTO v_ptype
    FROM Patient
    WHERE PA_ID = :NEW.PA_ID;

    IF UPPER(v_ptype) != 'INPATIENT' THEN
        RAISE_APPLICATION_ERROR(-20003, 'Only inpatients can be admitted.');
    END IF;

    -- 2. Check for overlapping room bookings in Room_Availability
    SELECT COUNT(*) INTO v_count
    FROM Room_Availability
    WHERE R_ID = :NEW.R_ID
      AND R_date = TRUNC(:NEW.Ad_date)
      AND (
            (:NEW.R_BOOK_TIME BETWEEN R_start_time AND NVL(R_end_time, :NEW.R_BOOK_TIME))
            OR
            (:NEW.R_UNBOOK_TIME BETWEEN R_start_time AND NVL(R_end_time, :NEW.R_UNBOOK_TIME))
            OR
            (R_start_time BETWEEN :NEW.R_BOOK_TIME AND :NEW.R_UNBOOK_TIME)
         )
      AND R_available = 'No';

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Room is already booked in this time slot.');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Patient record not found.');
END;
/
/

CREATE OR REPLACE TRIGGER trg_set_room_availability
AFTER INSERT ON Admission
FOR EACH ROW
BEGIN
    INSERT INTO Room_Availability (
        R_id, R_date, R_start_time, R_end_time, R_available
    ) VALUES (
        :NEW.R_id,
        TRUNC(:NEW.Ad_date),
        :NEW.R_book_time,
        :NEW.R_unbook_time,
        'No'
    );
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        -- If room already has availability record, update it
        UPDATE Room_Availability
        SET R_start_time = :NEW.R_book_time,
            R_end_time = :NEW.R_unbook_time,
            R_available = 'No'
        WHERE R_id = :NEW.R_id
          AND R_date = TRUNC(:NEW.Ad_date);
END;
/




CREATE TABLE Admission (
    Ad_id INT PRIMARY KEY,
    Pa_id INT,
    R_id INT,
    Re_id INT,
    Ad_date DATE,
    Dis_date DATE,
    R_book_time TIMESTAMP,
    R_unbook_time TIMESTAMP,
    FOREIGN KEY (Pa_id) REFERENCES Patient(Pa_id)
        ON DELETE CASCADE,
    FOREIGN KEY (R_id) REFERENCES Room(R_id)
        ON DELETE CASCADE,
    FOREIGN KEY (Re_id) REFERENCES Receptionist(Re_id)
        ON DELETE CASCADE
);

CREATE TABLE Doctor_Schedule (
    D_id INT,
    Avail_date DATE,
    Avail_time VARCHAR2(10), -- Format like '10:00 AM'
    Status VARCHAR2(10) CHECK (Status IN ('Free', 'Booked')),
    PRIMARY KEY (D_id, Avail_date, Avail_time),
    FOREIGN KEY (D_id) REFERENCES Doctor(D_id) ON DELETE CASCADE
);
CREATE TABLE Appointment (
    Ap_id INT PRIMARY KEY,
    Pa_id INT,
    D_id INT,
    Ap_date DATE,
    Ap_time VARCHAR2(10),
    FOREIGN KEY (Pa_id) REFERENCES Patient(Pa_id) ON DELETE CASCADE,
    FOREIGN KEY (D_id) REFERENCES Doctor(D_id) ON DELETE CASCADE
);



